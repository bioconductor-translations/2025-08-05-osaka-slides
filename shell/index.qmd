---
format:
  revealjs:
    incremental: false
    css: ../styles.css
execute: 
  echo: true
---

# Unixシェル

[SWC @ 千葉大学](https://swcarpentry-ja.github.io/2024-05-30-chiba/)

<https://swcarpentry-ja.github.io/2024-05-30-chiba/bash>

# [はじめに](https://swcarpentry-ja.github.io/shell-novice/index.html)

## データの準備

- [shell-lesson-data.zip](https://swcarpentry.github.io/shell-novice/data/shell-lesson-data.zip)をダウンロードして、ファイルをデスクトップに移動してください。

- ファイルを解凍します。**デスクトップに`shell-lesson-data`という新しいフォルダが作成されているはずです。**

## 新しいシェルを開く

オペレーティングシステム別の指示については、[シェルレッスン](https://swcarpentry-ja.github.io/shell-novice/#where-to-type-commands-how-to-open-a-new-shell)を参照してください。

# [シェルの紹介](https://swcarpentry-ja.github.io/shell-novice/01-intro.html)

## 人間とコンピュータの相互作用

- 人間は**GUI**（グラフィカルユーザインターフェース）または**CLI**（コマンドラインインターフェース）を使ってコンピュータと**対話**します。

- **GUI**: 直感的でメニュー駆動型ですが、反復作業には効率的ではありません。

- **CLI**（Unixシェル）: 反復作業に効率的で、タスクを迅速に自動化できます。

## シェルの紹介

- シェルはユーザーが入力したコマンドを**解釈**して**実行**します。

- 人気のあるUnixシェル: **Bash**（**B**ourne **A**gain **SH**ell）。

- シェルを使用する利点:
  - 反復作業を自動化
  - 強力なパイプラインで効率的なデータ処理
  - リモートマシンとのやり取りや高性能コンピューティングに不可欠

---

- 今日は**コマンド**を使ってシェルと対話する方法を学びます

## シェルインターフェース

シェルを開くと、次のようなものが表示されます:

```
$
```

## シェルインターフェース

- `$`は**プロンプト**で、ここにコマンドを入力します

- セットアップによっては、次のように少し異なる場合があります:

```
nelle@localhost $
```

## `ls`

最初に学ぶコマンドは`ls`で、現在のディレクトリの内容を**一覧表示**します（後で戻ってきます）:

```bash
ls
```

```
Desktop     Downloads   Movies      Pictures
Documents   Library     Music       Public
```

## Nelleのパイプライン

- サンプルデータセットは"Nelle Nemo"のストーリーに基づいています

- 文脈: Nelle Nemoは海洋生物学者で、海洋生物をサンプリングしています。

- Nelleのタスク: `goostats.sh`を使って1520のサンプルのタンパク質量を測定します。

- 課題: GUIを使用する場合、Nelleは1520のファイルを手動で実行する必要があり、12時間以上かかります。**Nelleはシェルを使ってこれをより効率的に行うことができるでしょうか？**

# [ファイルとフォルダのナビゲーション](https://swcarpentry-ja.github.io/shell-novice/02-filedir.html)

## 質問

- コンピュータ上でどのように移動できますか？

- どのようにファイルやディレクトリを確認できますか？

- コンピュータ上のファイルやディレクトリの場所をどのように指定できますか？

## ファイルシステムとは？

- **ファイルシステム**: ファイルとディレクトリを管理します。
  - **ファイル**: 情報（データ）を保持します。
  - **ディレクトリ**（= フォルダ）: ファイルまたは他のディレクトリを保持します。

## 現在地は？

`pwd`を使用して、現在の作業ディレクトリ（コンピュータ上の「居場所」）を表示します。

---

![](https://swcarpentry.github.io/shell-novice/fig/filesystem.svg)

## スラッシュ

- `/`文字には2つの意味があります。
  - ファイルやディレクトリ名の先頭に現れると、**ルートディレクトリ**を指します。
  - パスの内部に現れると、単なる**区切り**です。

---

![](https://swcarpentry.github.io/shell-novice/fig/home-directories.svg)

例えば、Nelleのファイルは`/Users/nelle`に保存されています。

## `ls`でファイルを一覧表示

- `-F`**オプション**を使用して出力を調整します:
  - 末尾の`/`はディレクトリを示します
  - `@`はリンクを示します
  - `*`は実行可能ファイルを示します

```bash
ls -F
```

## ターミナルをクリア

`clear`を使って散らかったターミナルをクリアできます（全ての出力を消します）

## ヘルプ

`--help`を追加してヘルプメニューを表示します:

```
ls --help
```

## ヘルプ

または、コマンドの前に`man`を追加します:

```bash
man ls
```

## チャレンジ: `ls` {.smaller}

![](https://swcarpentry.github.io/shell-novice/fig/filesystem-challenge.svg){height=250px}

`pwd`が`/Users/backup`を表示し、`-r`が`ls`に逆順で表示するよう指示する場合、**次の出力を得るにはどのコマンドを使用しますか:**

```bash
pnas_sub/ pnas_final/ original/
```

1. `ls pwd`
1. `ls -r -F`
1. `ls -r -F /Users/backup`

## 他のディレクトリの探索

```bash
ls -F Desktop
```

## `cd`で他のディレクトリに移動

```bash
cd Desktop
cd shell-lesson-data
cd exercise-data
```

## 移動のショートカット: `..`

`..`は一つ上のディレクトリに移動します

```bash
cd ..
```

## 移動のショートカット: `..`

`ls -a`を使ってすべてを表示すると、`..`が見えることに注意してください

## 移動のショートカット: `~`

`~`を使って**ホームディレクトリ**に移動できます

## 移動のショートカット: `-`

`-`を使って直前のディレクトリに戻ることができます

## 絶対パスと相対パス

- `/`で始まらないパスを入力すると、現在の場所に**相対的な**フォルダやファイルを指します

- `/`で始まるパスを入力すると、ファイルシステムの**ルートから**のパスを指します

---

## チャレンジ: 相対パス {.smaller}

![](https://swcarpentry.github.io/shell-novice/fig/filesystem-challenge.svg){height=250}

`pwd`が`/Users/thing`を表示している場合、**`ls -F ../backup`は何を表示しますか？**

1. `../backup: No such file or directory`
1. `2012-12-01 2013-01-08 2013-01-27`
1. `2012-12-01/ 2013-01-08/ 2013-01-27/`
1. `original/ pnas_final/ pnas_sub/`

## シェルコマンドの一般的な構文

![](https://swcarpentry.github.io/shell-novice/fig/shell_command_syntax.svg)

## シェルコマンドの一般的な構文

- オプションは通常2つの方法で書くことができます:
  - ロングフォーム`--`（`ls --all`）
  - ショートフォーム`-`（`ls -a`）
- スペースは重要です（`ls-F`はコマンド"ls-F"を意味します）
- 大文字と小文字は区別されます（`ls -s`と`ls -S`）

## タブ補完

シェルはタブキーを押すとファイルやフォルダの名前を自動で入力してくれます

`~/

Desktop/shell-lesson-data/`から試してみてください

```bash
ls north-pacific-gyre/
```

```bash
ls north-pacific-gyre/goo
```

# [ファイルとディレクトリの操作](https://swcarpentry-ja.github.io/shell-novice/03-create.html)

## 質問

- どのようにファイルやディレクトリを作成、コピー、削除できますか？

- どのようにファイルを編集できますか？

## `mkdir`で新しいディレクトリを作成

- `shell-lesson-data`にいることを確認し、その後`exercise-data/writing`に入ります

- 周りを見てから、`thesis`という新しいディレクトリを作成します:

```bash
mkdir thesis
```

## `mkdir`で新しいディレクトリを作成

`-p`を使用してネストされたディレクトリを作成できます

```bash
mkdir -p ../project/data ../project/results
```

実行した内容を確認します（`-R`オプションを使うと、ディレクトリ内のすべてのネストされたサブディレクトリを一覧表示します）:

```bash
ls -FR ../project
```

## ベストプラクティス: ファイルとディレクトリの名前

1. スペースを使用しないでください。
2. 名前の先頭に`-`（ダッシュ）を使用しないでください。
3. 文字、数字、`.`（ピリオド）、`-`（ダッシュ）、`_`（アンダースコア）を使用します。

## テキストファイルを作成

`nano`はテキストエディタプログラムです。ファイルを作成し、編集のために開きます。

```bash
cd thesis
nano draft.txt
```

---

![](https://swcarpentry.github.io/shell-novice/fig/nano-screenshot.png)

`Ctrl+o`を押して保存し（`^0`で示されています）、`Ctrl+x`で終了します

## `touch`でテキストファイルを作成

```bash
touch my_file.txt
```

## `rm`でファイルを削除

```bash
rm my_file.txt
```

- `rm`は完全に削除します！（ゴミ箱はありません）。使用する際は**非常に注意**してください。

## `mv`でファイルやフォルダを移動または名前変更

`shell-lesson-data/exercise-data/writing`に入ります:

```bash
cd ~/Desktop/shell-lesson-data/exercise-data/writing
```

`draft.txt`の名前を変更します:

```bash
mv thesis/draft.txt thesis/quotes.txt
```

（`ls`で結果を確認します）

## `mv`でファイルやフォルダを移動または名前変更

- `rm`と同様に、`mv`には「元に戻す」ボタンはありません: 同じ名前のファイルを上書きするので、**慎重に使用してください！**

`quotes.txt`を現在のディレクトリに移動します:

```bash
mv thesis/quotes.txt .
```

`ls thesis`を確認します

## `cp`でファイルやフォルダをコピー

- `cp`は`mv`に似ていますが、移動の代わりにコピーします

```bash
cp quotes.txt thesis/quotations.txt
ls quotes.txt thesis/quotations.txt
```

## `cp`でファイルやフォルダをコピー

- フォルダをそのまま`cp`することはできません:

```bash
cp thesis thesis_backup
```

```
cp: thesis is a directory (not copied).
```

## `cp`でファイルやフォルダをコピー

- フォルダとその内容をすべてコピーするには、`-r`（**r**ecursive）オプションを使用します

```bash
cp -r thesis thesis_backup
```

## `rm -r`でフォルダを削除

- `cp`で`-r`を使用するのと同様に、フォルダを削除するには`-r`が必要です:

```bash
rm -r thesis
```

- 再度、**注意！！**