---
format:
  revealjs:
    incremental: false
    css: ../styles.css
execute: 
  echo: true
---

# ソフトウェア<br>カーペントリー

::: {.medlarge}

千葉大学 2024-11-25

<https://swcarpentry-ja.github.io/2024-11-25-chiba-slides/>

:::

## アウトライン

- スタッフの自己紹介
- ソフトウェアカーペントリーの紹介
- ワークショップの流れ
- アイスブレーカー

## スタッフの自己紹介 {.center}

## ニッタ ジョエル<br>（インストラクター）

::: {.columns}
::: {.column}
[`@joelnitta`](https://github.com/joelnitta/)

- 千葉大学 国際学術研究院 准教授

- 研究テーマ：シダ植物の進化、生態学、ゲノム解析

- 趣味：ジョギング
:::
::: {.column}
![](../images/joel_nitta_in_field.png){height=350px}
:::
:::

## 西田 孝三（インストラクター）

::: {.columns}
::: {.column}
- パートタイマー

- 東京農工大学 理化学研究所 等

- 研究テーマ：パスウェイ-オミクスデータ マッピング・可視化

- 趣味：オープンサイエンスコミュニティに貢献すること
:::
::: {.column}
![](http://bioconductor.org/images/cab/kozo.png)
:::
:::

## 露崎 弘毅（ヘルパー）

::: {.columns}
::: {.column}
[`@kokitsuyuzaki`](https://github.com/kokitsuyuzaki)

- 千葉大学 医学研究院 人工知能（AI）医学 特任講師

- 研究テーマ: パッケージング、（シングルセル）オミックス解析

- 趣味: サーフィン、パン作り
:::
::: {.column}
![](../images/helper_koki.jpeg){height=350px}
:::
:::

## 行動規範

どなたでも気兼ねなくワークショップに参加できるように、[行動規範](https://carpentries-coc.readthedocs.io/ja/latest/topic_folders/policies/code-of-conduct.html)があります。

行動規範に反する行為があった場合は、[インシデントレポートフォーム](https://docs.google.com/forms/d/e/1FAIpQLSeYqO37p0P-5JsEoF-E_edpZM5iRdFxWHTFqILo6LzqGS33YQ/viewform?fbzx=-8556883400541824673)で報告することができます。

## JSBiについて

![](https://www.jsbi.org/media/files/_u/key_visual/bxz0ka00r.jpg)

- このワークショップは [日本バイオインフォマティクス学会](https://www.jsbi.org/) の [公募研究会・地域部会](https://www.jsbi.org/activity/koubo/detail--id-790.htm)として採択され、ご協力をいただいています。

- 非会員の方は是非[入会](https://www.jsbi.org/membership/)をご検討ください

## 準備

- [ソフトウェアのインストール（bash、git、R, RStudio）](https://swcarpentry-ja.github.io/2024-11-25-chiba/#setup)

- ファイルのダウンロード
  - [bash](https://swcarpentry-ja.github.io/shell-novice/#download-files)

- [ワークショップ前アンケート](https://carpentries.typeform.com/to/CvmMM8re?slug=2024-11-25-chiba)

## ソフトウェアカーペントリーの紹介 {.center}

## 問題

::: {.columns}
::: {.column width="60%"}
- 研究者は最近コードを使えざるを得ません

- ほとんどは独学で覚えます

- が、効率はあまり高くない
:::
::: {.column width="40%"}
<img src="https://2.bp.blogspot.com/-3Zik2AGqMlM/W-0gea-VWRI/AAAAAAABQKE/b0xXQ9ZeGJIOyS_1xqt_qHRmrmtOf6J7ACLcBGAs/s400/computer_typing_osoi.png" alt="drawing" height="300"/>
:::
:::

## ソフトウェアカーペントリー（SWC）の解決法

::: {.columns}
::: {.column width="60%"}
- 研究者が**コミュニティを<br>作って**、互いに教え合います

- 二日間にわたるワークショップ

- ３−４レッスンを教えます

<https://software-carpentry.org/>

:::
::: {.column width="40%"}
<img src="https://4.bp.blogspot.com/-v-d7JYMZJn0/VvKZKMuZhzI/AAAAAAAA5FQ/p8m3U0QRZ8kI8mbkOv0uMEZrwT7F5Baiw/s450/seminor_woman.png" alt="drawing" height="300"/>
:::
:::

## ワークショップ

:::: {.columns}

::: {.column width="40%"}
- 誰でも参加できます

- 無料か少額

- ワークショップを教えるのに[資格](https://carpentries.org/become-instructor/)が必要

- 改善のためのフィードバックは重視されています
:::

::: {.column width="60%"}
![](https://mablab.org/img/post/2018-04-24_dcapril_s.jpg)

:::

::::

---

### 世界各国で実施

![](https://feeds.carpentries.org/plot_workshops_map.svg)

## 日本ではまだ始まったばかり

- 今回が**第2回目**対面日本語ワークショップ
  - これから増やす予定

- 翻訳活動も行っています

## 参加者大募集中!

- Slack

  - <https://slack-invite.carpentries.org/>から Slack に参加後、 `#local-japan` チャンネルに入って下さい

- GitHub: <https://swcarpentry-ja.github.io/>

## ワークショップの流れ {.center}

## 内容

- 25日：[Shell](https://swcarpentry-ja.github.io/shell-novice)、[Git](https://swcarpentry-ja.github.io/git-novice)

- 26日：[R](https://swcarpentry-ja.github.io/r-novice-gapminder/)

上記のリンクからレッスンの内容にアクセスできます<br>（ChatGPTによる翻訳が含まれています）

## SWCワークショップの流れ

- （軽い）スライドによる内容の説明

- **ライブコーディング**

## ライブコーディングとは？

::: {.columns}
::: {.column}
- インストラクターが打っていると同じコードを同時に**自分のパソコンで<br>打っていく**

- そのコードを**理解すること**を最も優先して下さい<br>（メモをとるなどよりも）
:::
::: {.column}
![](images/chiba_swc_2024-05-30.png)
:::
:::

## ライブコーディングとは？ {.smaller}

::: {.columns}
::: {.column}
- インストラクターが参加者の理解を<br>確認する（「〜が出来ましたか？」）

- うまく出来ていれば、**緑付箋**を<br>ラップトップにつけて下さい

- 何か困っているときは、**赤付箋**を<br>ラップトップにつけて下さい
  - ヘルパーが助けに行きます
:::
::: {.column}
![](https://carpentries.github.io/instructor-training/fig/Scene_1_blue_stickies_labeled.jpeg)
:::
:::

---

<br><br>

インストラクターが聞かなくても、何か問題があった時に**声をかけて下さい**（あるいは、赤い付箋を貼ってください）

## コラボレイティブ・ノート

[Etherpad](https://pad.carpentries.org/2024-11-25-chiba)にコードを貼っておきます。

- もしインストラクターが進んで、コードが見えなくなったら、Etherpadのメモを参照して下さい。
  - 参加者もご自由に書き込んでください

## フィードバックの種類

- 感想（１日の終わりに付箋に書いていただく）

- ワークショップ前後の[アンケート](https://carpentries.typeform.com/to/CvmMM8re?slug=2024-11-25-chiba)

## アイスブレーカー

隣の方に自己紹介しましょう

- 研究テーマは何ですか？

- 趣味は何ですか？

# Unixシェル

## データの準備

- [shell-lesson-data.zip](https://swcarpentry.github.io/shell-novice/data/shell-lesson-data.zip)をダウンロードして、ファイルをデスクトップに移動してください。

- ファイルを解凍します。**デスクトップに`shell-lesson-data`という新しいフォルダが作成されているはずです。**

## 人間とコンピュータの相互作用

- 人間は**GUI**（グラフィカルユーザインターフェース）または**CLI**（コマンドラインインターフェース）を使ってコンピュータと**対話**します。

- **GUI**: 直感的でメニュー駆動型ですが、反復作業には効率的ではありません。

- **CLI**（Unixシェル）: 反復作業に効率的で、タスクを迅速に自動化できます。

---

- シェルはユーザーが入力したコマンドを**解釈**して**実行**します。

- 人気のあるUnixシェル: **Bash**（**B**ourne **A**gain **SH**ell）。

- シェルを使用する利点:
  - 反復作業を自動化
  - 強力なパイプラインで効率的なデータ処理
  - リモートマシンとのやり取りや高性能コンピューティングに不可欠

---

- 今日は**コマンド**を使ってシェルと対話する方法を学びます

## Nelleのパイプライン

- サンプルデータセットは"Nelle Nemo"のストーリーに基づいています

- Nelle Nemoは海洋生物学者で、海洋生物をサンプリングしています。

- Nelleのタスク: `goostats.sh`を使って1520のサンプルのタンパク質量を測定します。

- 課題: GUIを使用する場合、Nelleは1520のファイルを手動で実行する必要があり、12時間以上かかります。**Nelleはシェルを使ってこれをより効率的に行うことができるでしょうか？**

---

![](https://swcarpentry.github.io/shell-novice/fig/filesystem.svg)


---

![](https://swcarpentry.github.io/shell-novice/fig/home-directories.svg)

## チャレンジ: `ls` {.smaller}

:::: {.columns}

::: {.column width="50%"}
`pwd`が`/Users/backup`を表示し、`-r`が`ls`に逆順で表示するよう指示する場合、**次の出力を得るにはどのコマンドを使用しますか:**

```bash
pnas_sub/ pnas_final/ original/
```

1. `ls pwd`
1. `ls -r -F`
1. `ls -r -F /Users/backup`
:::

::: {.column width="50%"}
![](https://swcarpentry.github.io/shell-novice/fig/filesystem-challenge.svg)
:::

::::

## チャレンジ: 相対パス {.smaller}

:::: {.columns}

::: {.column width="50%"}

`pwd`が`/Users/thing`を表示している場合、**`ls -F ../backup`は何を表示しますか？**

1. `../backup: No such file or directory`
1. `2012-12-01 2013-01-08 2013-01-27`
1. `2012-12-01/ 2013-01-08/ 2013-01-27/`
1. `original/ pnas_final/ pnas_sub/`

:::

::: {.column width="50%"}
![](https://swcarpentry.github.io/shell-novice/fig/filesystem-challenge.svg)
:::
::::

# Git

## なぜGitを使うのか？

- Gitとは、ファイル（コード）を追跡するソフト
- MS Wordの変更の追跡昨日に近い
- コードが「壊れた」時に巻き戻せる
- コードの共有と共同作業をやりやすくする

## チャレンジ：埋もれたファイルを無視する

以下のようなディレクトリ構造があるとします：

``` bash
results/data
results/plots
```

`results/data` ではなく、`results/plots` のみを無視するにはどうすればいいのでしょう？

## チャレンジ：ログファイル {.smaller}

仮に `log_01`、`log_02`、`log_03`、というように、中間的にログファイルを作成するスクリプトを書いたとします。 これらのログファイルは取っておきたいのですが、git で追跡したくありません。

1. `log_01`、`log_02`、などのファイルを無視するためのルールを一つだけ `.gitignore `に入力してください。
1. 入力したパターン正常に動作しているか確認するために `log_01` などのファイルを作成してください。
1. 最終的に `log_01` ファイルがものすごく重要であることが分かりました。`.gitignore `を編集せずに、このファイルを追跡しているファイルに加えてください。
1. 隣の人と、追跡したくないファイルは他にどのようなものがあるのか、そして`.gitignore `に何を入力すればこれらのファイルを無視できるのかを話し合ってください。

## 認証の設定

- リモートリポジトリに接続する前に、自分のコンピュータが GitHub に認証される方法を設定する必要があります。

- これにより、GitHub はあなたのコンピュータからのアクセスを信頼できるようになります。

## SSH プロトコルとは？

- コマンドラインでのアクセスを認証するために一般的に使用される方法を設定します。

- この方法は「Secure Shell Protocol（SSH）」と呼ばれます。

- SSH は、暗号化されたネットワークプロトコルで、通常は安全でないネットワークを使用してコンピュータ間の安全な通信を可能にします。

## SSH 鍵ペアの仕組み

- SSH は「鍵ペア」を使用します。
- 鍵ペアはアクセスを検証するために連携して動作する2つの鍵です。
- 一つは公開鍵（public key）、もう一つは秘密鍵（private key）と呼ばれます。

## 公開鍵と秘密鍵の例え

- 公開鍵を南京錠と考えてください。
- 秘密鍵はその南京錠を開ける鍵です。
- 公開鍵を GitHub アカウントに設定し、「この南京錠で通信をロックしてください」とします。
- これにより、秘密鍵を持つコンピュータだけが通信を解読し、Git コマンドを GitHub アカウントとして送信できます。

---

### リモートリポジトリを作成する

![](https://swcarpentry-ja.github.io/git-novice/fig/git-freshly-made-github-repo.svg)

---

### リモートリポジトリに変更をプッシュする

![](https://swcarpentry-ja.github.io/git-novice/fig/github-repo-after-first-push.svg)

## チャレンジ：GitHub の GUI

GitHubのあなたのplanetsリポジトリに移動して下さい。

「Code」ボタンの下にある「XX commits」というテキストを見つけてクリックします（「XX」は数字です）。各コミットの右側にある3つのボタンにカーソルを合わせてクリックします。

- これらのボタンから**どのような情報**を収集/探索できますか？

- シェルで同じ情報を得るにはどうしますか？

## 共同作業 {.center}

## GitHubを介して共同作業してみよう

- 今回の課題は、**ペア**を組んでやります

- 一人は「**オーナー**」、もう一人は「**コラボレーター**」

- コラボレーターの目標は、オーナーのリポジトリに変更を加えることです。

- 最後に役割を交代するので、両方の人がオーナーとコラボレーターの役割を果たします。

## コラボレーターにアクセス権限を与える

- GitHubのリポジトリページで「Settings」ボタンをクリックします。
- 「Collaborators」を選択します。
- 「Add people」をクリックし、パートナーの**ユーザー名**を入力します。

---

![](https://swcarpentry-ja.github.io/git-novice/fig/github-add-collaborators.png)

## コラボレーターがオーナーのリポジトリへのアクセスを受け入れる

- <https://github.com/notifications> にアクセスするか、メール通知を確認します。
- オーナーのリポジトリへのアクセスを**受け入れます**。

## オーナーのリポジトリをクローンする

- コラボレーターはオーナーのリポジトリのコピーを自分のマシンにダウンロードします。（**クローンする**）

- 自分の `planets.git` バージョンを上書きしないように、オーナーのリポジトリを別の場所にクローンします。

## オーナーのリポジトリをクローンする

デスクトップフォルダにクローンする場合:

```bash
$ git clone git@github.com:vlad/planets.git ~/Desktop/vlad-planets
```

`vlad` をオーナーのユーザー名に置き換えます。

クローンパス（`~/Desktop/vlad-planets`）を指定しない場合は、自分の `planets` フォルダ内にクローンされるので、**最初にデスクトップフォルダに移動してください。**

---

![](https://swcarpentry-ja.github.io/git-novice/fig/github-collaboration.svg)

## クローンしたリポジトリーに変更を加える

- コラボレーターは、オーナーのリポジトリのクローンで変更を加えることができます。例えば:

``` bash
cd ~/Desktop/vlad-planets
nano pluto.txt
git add pluto.txt
git commit -m "Add notes about Pluto"
```

## 変更を加えたファイルをリモートに送る（プッシュ）

``` bash
git push origin main
```

## オーナーのリポジトリを確認

- オーナーのリポジトリを再確認し、コラボレーターが行った新しいコミットを確認します。

- ブラウザをリフレッシュする必要があるかもしれません

## オーナーのローカルなリポジトリの更新

- オーナーが行います：

``` bash
git pull origin main
```

- これで、三つのリポジトリ（オーナー、オーナーのリモート、コラボレーター）が同期されました

## もう一回しましょう

- 今度は役割を交代して、もう一度やってみましょう

## チャレンジ：変更のレビュー

オーナーはコラボレーターに情報を提供せずにリポジトリにコミットをプッシュしました。

コマンドラインでは、コラボレーターは何が変更されたかをどのように確認できますか？

また、GitHubではどうやって確認できますか？

# ソフトウェア<br>カーペントリー 二日目

## １日目のおさらい

- シェルは研究に必須なスキル
  - オープンソースソフトウエア
  - サーバー
  - gitにも必要

- git は細かいレベルでコードの変更を追跡して、共有を可能にする

<!-- FIX ME: Add after receiving feedback

## よくできたこと

## 改善できること

-->

## 集合写真

- 「公開しても大丈夫」という方は、是非ご協力をお願いします。

- 後ろから撮った写真を公開することがありますが、もし公開を希望されない場合は、お知らせください。

<https://swcarpentry-ja.github.io/2024-05-30-chiba/>
