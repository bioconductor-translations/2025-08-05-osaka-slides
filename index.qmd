---
format:
  revealjs:
    incremental: false
    css: styles.css
execute: 
  echo: true
---

# ソフトウェア<br>カーペントリー

::: {.medlarge}

千葉大学 2024-11-25

<https://swcarpentry-ja.github.io/2024-11-25-chiba-slides/>

:::

## アウトライン

- スタッフの自己紹介
- ソフトウェアカーペントリーの紹介
- ワークショップの流れ
- アイスブレーカー

## スタッフの自己紹介 {.center}

## ニッタ ジョエル<br>（インストラクター）

::: {.columns}
::: {.column}
[`@joelnitta`](https://github.com/joelnitta/)

- 千葉大学 国際学術研究院 准教授

- 研究テーマ：シダ植物の進化、生態学、ゲノム解析

- 趣味：ジョギング
:::
::: {.column}
![](images/joel_nitta_in_field.png){height=350px}
:::
:::

## 西田 孝三（インストラクター）

::: {.columns}
::: {.column}
- パートタイマー

- 東京農工大学 理化学研究所 等

- 研究テーマ：パスウェイ-オミクスデータ マッピング・可視化

- 趣味：オープンサイエンスコミュニティに貢献すること
:::
::: {.column}
![](http://bioconductor.org/images/cab/kozo.png)
:::
:::

## 岡　昂輝（ヘルパー）

::: {.columns}
::: {.column}
[`@takakioka`](https://github.com/takakioka)

- 東京農工大学 工学府 生命工学専攻 修士課程

- 研究テーマ: 大規模コホートデータを用いたアルツハイマー病態進行予測に資する代謝物バイオマーカーの探索

- 趣味: ドライブ
:::
::: {.column}
![](images/helper_takaki.png){height=350px}
:::
:::

## 露崎 弘毅（ヘルパー）

::: {.columns}
::: {.column}
[`@kokitsuyuzaki`](https://github.com/kokitsuyuzaki)

- 千葉大学 医学研究院 人工知能（AI）医学 特任講師

- 研究テーマ: パッケージング、（シングルセル）オミックス解析

- 趣味: サーフィン、パン作り
:::
::: {.column}
![](images/helper_koki.jpeg){height=350px}
:::
:::

## 行動規範

どなたでも気兼ねなくワークショップに参加できるように、[行動規範](https://carpentries-coc.readthedocs.io/ja/latest/topic_folders/policies/code-of-conduct.html)があります。

行動規範に反する行為があった場合は、[インシデントレポートフォーム](https://docs.google.com/forms/d/e/1FAIpQLSeYqO37p0P-5JsEoF-E_edpZM5iRdFxWHTFqILo6LzqGS33YQ/viewform?fbzx=-8556883400541824673)で報告することができます。

## JSBiについて

![](https://www.jsbi.org/media/files/_u/key_visual/bxz0ka00r.jpg)

- このワークショップは [日本バイオインフォマティクス学会](https://www.jsbi.org/) の [公募研究会・地域部会](https://www.jsbi.org/activity/koubo/detail--id-790.htm)として採択され、ご協力をいただいています。

- 非会員の方はぜひ[入会](https://www.jsbi.org/membership/)をご検討ください。

## 準備

- [ソフトウェアのインストール（bash、git、R, RStudio）](https://swcarpentry-ja.github.io/2024-11-25-chiba/#setup)

- ファイルのダウンロード
  - [bash](https://swcarpentry-ja.github.io/shell-novice/#download-files)

- [ワークショップ前アンケート](https://carpentries.typeform.com/to/CvmMM8re?slug=2024-11-25-chiba)

## ソフトウェアカーペントリーの紹介 {.center}

## 問題

::: {.columns}
::: {.column width="60%"}
- 研究者は近年、コードを使うことが必要不可欠になっています。

- 多くの研究者は独学でコードを学びます。

- しかし、効率があまり良くありません。
:::
::: {.column width="40%"}
<img src="https://2.bp.blogspot.com/-3Zik2AGqMlM/W-0gea-VWRI/AAAAAAABQKE/b0xXQ9ZeGJIOyS_1xqt_qHRmrmtOf6J7ACLcBGAs/s400/computer_typing_osoi.png" alt="drawing" height="300"/>
:::
:::

## ソフトウェアカーペントリー（SWC）の解決法

::: {.columns}
::: {.column width="60%"}
- 研究者が**コミュニティを作り**、互いに教え合います。

- 2日間にわたるワークショップで、3〜4つのレッスンを学びます。

<https://software-carpentry.org/>

:::
::: {.column width="40%"}
<img src="https://4.bp.blogspot.com/-v-d7JYMZJn0/VvKZKMuZhzI/AAAAAAAA5FQ/p8m3U0QRZ8kI8mbkOv0uMEZrwT7F5Baiw/s450/seminor_woman.png" alt="drawing" height="300"/>
:::
:::

## ワークショップ

:::: {.columns}

::: {.column width="40%"}
- 誰でも参加可能

- 無料または少額で提供

- ワークショップの指導には[資格](https://carpentries.org/become-instructor/)が必要です。

- 改善のためのフィードバックを重視します。
:::

::: {.column width="60%"}
![](https://mablab.org/img/post/2018-04-24_dcapril_s.jpg)

:::

::::

---

### 世界各国で実施

![](https://feeds.carpentries.org/plot_workshops_map.svg)

## 日本ではまだ始まったばかり

- 今回が**第2回目**の対面日本語ワークショップです。
  - 今後も増やしていく予定です。

- 翻訳活動も行っています。

## 参加者大募集中!

- Slack

  - <https://slack-invite.carpentries.org/> から Slack に参加し、`#local-japan` チャンネルに入ってください。

- GitHub: <https://swcarpentry-ja.github.io/>

## ワークショップの流れ {.center}

## 内容

- 25日：[Shell](https://swcarpentry-ja.github.io/shell-novice)、[Git](https://swcarpentry-ja.github.io/git-novice)

- 26日：[R](https://swcarpentry-ja.github.io/r-novice-gapminder/)

上記のリンクからレッスンの内容にアクセスできます<br>（ChatGPTによる翻訳が含まれています）

## SWCワークショップの流れ

- **軽いスライド**による内容の説明

- **ライブコーディング**

## ライブコーディングとは？

::: {.columns}
::: {.column}
- インストラクターが入力するコードを、同時に**自分のパソコンで入力**します。

- **コードを理解すること**を最優先してください<br>（メモを取るよりも）。
:::
::: {.column}
![](images/chiba_swc_2024-05-30.png)
:::
:::

## ライブコーディングとは？ {.smaller}

::: {.columns}
::: {.column}
- インストラクターは参加者の理解を確認します<br>（例：「〜ができましたか？」）

- 理解できている場合は**緑の付箋**をラップトップに貼ってください。

- 困ったことがある場合は**赤い付箋**をラップトップに貼ってください。
  - ヘルパーが助けに行きます。
:::
::: {.column}
![](https://carpentries.github.io/instructor-training/fig/Scene_1_blue_stickies_labeled.jpeg)
:::
:::

---

<br><br>

インストラクターが聞かなくても、何か問題があった時は**声をかけてください**（または赤い付箋を貼ってください）。

## コラボレイティブ・ノート

[Etherpad](https://pad.carpentries.org/2024-11-25-chiba)にコードを貼っておきます。

- インストラクターが進みすぎてコードが見えなくなった場合は、Etherpadのメモを参照してください。
  - 参加者も自由に書き込んでください。

## フィードバックの種類

- 感想（1日の終わりに付箋に記入していただきます）

- ワークショップ前後の[アンケート](https://carpentries.typeform.com/to/CvmMM8re?slug=2024-11-25-chiba)

## アイスブレーカー

隣の方に自己紹介をしましょう

- 研究テーマは何ですか？

- 趣味は何ですか？

# Unixシェル

## データの準備

- [shell-lesson-data.zip](https://swcarpentry.github.io/shell-novice/data/shell-lesson-data.zip)をダウンロードして、デスクトップに移動してください。

- ファイルを解凍します。**デスクトップに`shell-lesson-data`という新しいフォルダが作成されているはずです。**

## 人間とコンピュータの相互作用

- 人間は**GUI**（グラフィカルユーザインターフェース）または**CLI**（コマンドラインインターフェース）を使ってコンピュータと**対話**します。

- **GUI**: 視覚的で直感的な操作が可能ですが、反復作業には効率的ではありません。

- **CLI**（Unixシェル）: 反復作業に効率的で、タスクを迅速に自動化できます。

---

- シェルはユーザーが入力したコマンドを**解釈**し、**実行**します。

- よく使われるUnixシェル: **Bash**（**B**ourne **A**gain **SH**ell）。

- シェルを使う利点:
  - 反復作業を自動化
  - パイプラインを活用した効率的なデータ処理
  - リモートマシンの操作や高性能コンピューティングに不可欠

---

- 今日は**コマンド**を使ってシェルと対話する方法を学びます。

## Nelleのパイプライン

- サンプルデータセットは"Nelle Nemo"のストーリーに基づいています。

- Nelle Nemoは海洋生物学者で、海洋生物をサンプリングしています。

- Nelleのタスク: `goostats.sh`を使って1520のサンプルのタンパク質量を測定します。

- 課題: GUIを使用すると、Nelleは1520のファイルを手動で実行する必要があり、12時間以上かかります。**シェルを使えば、これをより効率的に行うことができるでしょうか？**

---

![](https://swcarpentry.github.io/shell-novice/fig/filesystem.svg)


---

![](https://swcarpentry.github.io/shell-novice/fig/home-directories.svg)

## チャレンジ: `ls` {.smaller}

:::: {.columns}

::: {.column width="50%"}
`pwd`が`/Users/backup`を表示し、`-r`が`ls`に逆順で表示するよう指示する場合、**次の出力を得るにはどのコマンドを使用しますか:**

```bash
pnas_sub/ pnas_final/ original/
```

1. `ls pwd`
1. `ls -r -F`
1. `ls -r -F /Users/backup`
:::

::: {.column width="50%"}
![](https://swcarpentry.github.io/shell-novice/fig/filesystem-challenge.svg)
:::

::::

## チャレンジ: 相対パス {.smaller}

:::: {.columns}

::: {.column width="50%"}

`pwd`が`/Users/thing`を表示している場合、**`ls -F ../backup`は何を表示しますか？**

1. `../backup: No such file or directory`
1. `2012-12-01 2013-01-08 2013-01-27`
1. `2012-12-01/ 2013-01-08/ 2013-01-27/`
1. `original/ pnas_final/ pnas_sub/`

:::

::: {.column width="50%"}
![](https://swcarpentry.github.io/shell-novice/fig/filesystem-challenge.svg)
:::
::::

# Git

## なぜGitを使うのか？

- Gitとは、ファイル（コード）を追跡するソフトです。
- MS Wordの「変更履歴の追跡」機能に似ています。
- コードが「壊れた」時に巻き戻せます。
- コードの共有や共同作業を簡単にします。

## チャレンジ：埋もれたファイルを無視する

以下のようなディレクトリ構造があるとします：

``` bash
results/data
results/plots
```

`results/data`ではなく、`results/plots`のみを無視するにはどうすればよいでしょう？

## チャレンジ：ログファイル {.smaller}

仮に `log_01`、`log_02`、`log_03`といった中間ログファイルを作成するスクリプトを書いたとします。 これらのログファイルは保存しておきたいものの、gitで追跡したくありません。

1. `log_01`、`log_02`などのファイルを無視するためのルールを1つだけ`.gitignore`に記入してください。
1. 入力したパターンが正常に動作するか確認するために、`log_01`などのファイルを作成してください。
1. 最終的に`log_01`ファイルが重要であると判明しました。`.gitignore`を編集せずにこのファイルを追跡対象に加えてください。
1. 隣の人と、「追跡したくないファイルにはどのようなものがあるか」「.gitignoreにどのように記述するか」を話し合ってください。

## 認証の設定

- リモートリポジトリに接続する前に、自分のコンピュータをGitHubに認証する方法を設定する必要があります。

- これにより、GitHubはあなたのコンピュータからのアクセスを信頼します。

## SSH プロトコルとは？

- コマンドラインでアクセスを認証する一般的な方法を設定します。

- この方法は「Secure Shell Protocol（SSH）」と呼ばれます。

- SSHは、暗号化されたネットワークプロトコルで、通常は安全でないネットワークを介して安全な通信を可能にします。

## SSH 鍵ペアの仕組み

- SSHは「鍵ペア」を使います。
- 鍵ペアはアクセスを検証するために協働して動作する2つの鍵です。
- 一方は公開鍵（public key）、もう一方は秘密鍵（private key）と呼ばれます。

## 公開鍵と秘密鍵の例え

- 公開鍵を南京錠に例えます。
- 秘密鍵はその南京錠を開ける鍵です。
- 公開鍵をGitHubアカウントに設定し、「この南京錠で通信をロックしてください」とします。
- これにより、秘密鍵を持つコンピュータだけが通信を解読し、GitコマンドをGitHubアカウントとして送信できます。

---

### リモートリポジトリに変更をプッシュする

![](https://swcarpentry-ja.github.io/git-novice/fig/github-repo-after-first-push.svg)

## チャレンジ：GitHub の GUI

GitHub の `planets` リポジトリに移動してください。

「Code」ボタンの下にある「XX commits」というテキストを見つけてクリックします（「XX」は数字です）。各コミットの右側にある3つのボタンにカーソルを合わせてクリックします。

- これらのボタンから**どのような情報**を収集・探索できますか？

- シェルで同じ情報を得るにはどうしますか？

## 共同作業 {.center}

## GitHub を使った共同作業をしてみましょう

- 今回の課題は、**ペア**を組んで行います。

- 一人は「**オーナー**」、もう一人は「**コラボレーター**」を担当します。

- コラボレーターの目標は、オーナーのリポジトリに変更を加えることです。

- 最後に役割を交代し、両方の人がオーナーとコラボレーターの役割を経験します。

## コラボレーターにアクセス権限を与える

- GitHub のリポジトリページで「Settings」ボタンをクリックします。
- 「Collaborators」を選択します。
- 「Add people」をクリックし、パートナーの**ユーザー名**を入力します。

---

![](https://swcarpentry-ja.github.io/git-novice/fig/github-add-collaborators.png)

## コラボレーターがオーナーのリポジトリへのアクセスを受け入れる

- <https://github.com/notifications> にアクセスするか、メール通知を確認してください。
- オーナーのリポジトリへのアクセスを**承認**します。

## オーナーのリポジトリをクローンする

- コラボレーターはオーナーのリポジトリのコピーを自分のマシンにダウンロードします（**クローンする**）。

- 自分の `planets.git` バージョンを上書きしないよう、オーナーのリポジトリを別の場所にクローンしてください。

## オーナーのリポジトリをクローンする

デスクトップフォルダにクローンする場合:

```bash
$ git clone git@github.com:vlad/planets.git ~/Desktop/vlad-planets
```

`vlad` をオーナーのユーザー名に置き換えてください。

クローンパス（`~/Desktop/vlad-planets`）を指定しない場合、自分の `planets` フォルダ内にクローンされるので、**最初にデスクトップフォルダに移動してください。**

---

![](https://swcarpentry-ja.github.io/git-novice/fig/github-collaboration.svg)

## クローンしたリポジトリに変更を加える

- コラボレーターは、オーナーのリポジトリのクローンに変更を加えます。例えば:

``` bash
cd ~/Desktop/vlad-planets
nano pluto.txt
git add pluto.txt
git commit -m "Add notes about Pluto"
```

## 変更を加えたファイルをリモートに送る（プッシュ）

``` bash
git push origin main
```

## オーナーのリポジトリを確認

- オーナーのリポジトリを再確認し、コラボレーターが行った新しいコミットを確認します。

- ブラウザを更新する必要がある場合もあります。

## オーナーのローカルリポジトリの更新

- オーナーが以下を実行します：

``` bash
git pull origin main
```

- これで、3つのリポジトリ（オーナーのローカル、オーナーのリモート、コラボレーターのリポジトリ）が同期されます。

## もう一回やってみましょう

- 今度は役割を交代して、もう一度試してみましょう。

## チャレンジ：変更のレビュー

オーナーがコラボレーターに情報を提供せずにリポジトリにコミットをプッシュしました。

- コマンドラインでは、コラボレーターは何が変更されたかをどのように確認できますか？

- GitHub ではどのように確認できますか？

# ソフトウェア<br>カーペントリー 二日目

## 1日目のおさらい

- シェルは研究に必要不可欠なスキルです。
  - オープンソースソフトウェアの活用
  - サーバーの操作
  - git の使用にも必須

- git はコードの細かな変更を追跡し、共有を可能にします。

# R と RStudio

## チャレンジ：変数名

次の中で有効なRの変数名はどれですか？

- min_height
- max.height
- _age
- .mass
- MaxLength
- min-length
- 2widths
- celsius2kelvin

## チャレンジ：変数の比較と削除

- 次のプログラムの各文の後で、各変数の値はどうなるでしょうか？

``` r
mass <- 47.5
age <- 122
mass <- mass * 2.3
age <- age - 20
```

- 上記のコードを実行し、massとageを比較するコマンドを書きましょう。massはageより大きいですか？

- 作業環境を整理し、massとageの変数を削除しましょう。

## チャレンジ：パッケージのインストール

以下のパッケージをインストールしてみましょう：

- ggplot2
- plyr
- gapminder

## チャレンジ：プロジェクトの作成

RStudio で新しいプロジェクトを作成してみましょう：

1. 「File」メニューをクリックし、「New Project」を選択します。
2. 「New Directory」をクリックします。
3. 「New Project」をクリックします。
4. プロジェクトを保存するディレクトリの名前（例：my_project）を入力します。
5. 「Create a git repository」のチェックボックスが表示される場合は選択します。
6. 「Create Project」ボタンをクリックします。

## チャレンジ：プロジェクトの開き方

ファイルシステムを使って RStudio のプロジェクトを開いてみましょう：

1. RStudio を終了します。
2. 先ほどのチャレンジで作成したプロジェクトのディレクトリに移動します。
3. そのディレクトリ内の .Rproj ファイルをダブルクリックします。

## チャレンジ：データの保存

[このリンク](https://joelnitta.github.io/r-novice-gapminder/data/gapminder_data.csv)から CSV ファイルをダウンロードしてください。

1. ファイルをダウンロードします（上記リンクを右クリック -> 「リンク先を名前を付けて保存」/「名前を付けて保存」、またはリンクをクリックしページが読み込まれた後に Ctrl+S を押すか、メニューの「ファイル」 -> 「ページを名前を付けて保存」を選択）。
2. `gapminder_data.csv` という名前で保存されていることを確認します。
3. ファイルをプロジェクト内の `data/` フォルダに保存します。

後ほどこのデータを読み込み、確認します。

## チャレンジ：シェルの利用

R に読み込む前に、コマンドラインからデータセットについての一般的な情報を得ることは有益です。
これにより、R に読み込む際の判断に役立ちます。コマンドラインシェルを使用して以下の質問に答えてください：

1. ファイルのサイズはどれくらいですか？
2. このファイルには何行のデータがありますか？
3. このファイルにはどのような値が含まれていますか？

ヒント: RStudio のコンソールペインにある「Terminal」タブを使用すると、RStudio 内で直接コマンドラインを操作できます。

## チャレンジ：作業ディレクトリの確認1

getwd() コマンドを使用するか、RStudio のメニューを使って現在の作業ディレクトリを確認します。

1. コンソールで getwd()（“wd” は “working directory” の略）と入力し、Enter を押します。
2. ファイルペインで、data フォルダをダブルクリックして開く（または他の任意のフォルダに移動）。作業ディレクトリに戻るには、ファイルペインの「More」をクリックし、「Go To Working Directory」を選択します。

## チャレンジ：作業ディレクトリの確認2

setwd() コマンドを使用するか、RStudio のメニューを使って作業ディレクトリを変更します。

1. コンソールで setwd("data") と入力し、Enter を押します。その後、getwd() と入力して Enter を押し、新しい作業ディレクトリを確認します。
2. RStudio ウィンドウ上部のメニューで「Session」をクリックし、「Set Working Directory」を選択して「Choose Directory」をクリックします。その後、開いたウィンドウでプロジェクトディレクトリに戻り、「Open」をクリックします。コンソールに setwd コマンドが自動的に表示されます。

# R のデータ構造とデータフレーム

## チャレンジ：データフレームから変数、観測値、要素を取得する

下記の例を試して、それぞれが何を返すのかを説明してください。

- cats[1]
- cats[[1]]
- cats$coat
- cats["coat"]
- cats[1, 1]
- cats[, 1]
- cats[1, ]

ヒント: 返されるものを調べるには、typeof() 関数を使用してください。

## チャレンジ：データフレームの作成

次の構文を使用して、新しいデータフレームを R 内で作成できます：

``` r
df <- data.frame(id = c("a", "b", "c"),
                 x = 1:3,
                 y = c(TRUE, TRUE, FALSE))
```

以下の情報を持つデータフレームを作成してください：

- 名
- 姓
- ラッキーナンバー

次に、rbind を使用して隣の人のエントリを追加しましょう。
最後に、cbind を使用して「コーヒーブレイクの時間ですか？」という質問への各人の回答を含む列を追加してください。

## チャレンジ：データフレームの確認

データの最後の数行や中間のいくつかの行も確認するのが良い習慣です。これをどのように行いますか？

特に中間の行を探すのは難しくありませんが、ランダムな行をいくつか取得することもできます。これをどのようにコード化しますか？

## チャレンジ：再現性のある分析のためのコードの保存と再利用

File -> New File -> R Script に移動し、`gapminder` データセットを読み込むための R スクリプトを作成します。このスクリプトを `scripts/` ディレクトリに保存し、バージョン管理に追加してください。

その後、`source` 関数を使用してスクリプトを実行します。ファイルパスを引数として指定するか、RStudio の「Source」ボタンを押します。

# データの部分集合化

## チャレンジ：データの部分の取得

次のコードが与えられた場合：

``` r
x <- c(5.4, 6.2, 7.1, 4.8, 7.5)
names(x) <- c('a', 'b', 'c', 'd', 'e')
print(x)
```
```
a   b   c   d   e
5.4 6.2 7.1 4.8 7.5 
```

次の出力を生成する少なくとも 2 つの異なるコマンドを考え出してください：
```
 b   c   d
6.2 7.1 4.8 
```

2 つの異なるコマンドを見つけたら、隣の人と比較してみてください。異なる戦略を持っていましたか？

## チャレンジ：条件を満たす部分の取得

以下のコードを用いて：

``` r
x <- c(5.4, 6.2, 7.1, 4.8, 7.5)
names(x) <- c('a', 'b', 'c', 'd', 'e')
print(x)
```
```
 a   b   c   d   e
5.4 6.2 7.1 4.8 7.5 
```

`x` から 4 より大きく 7 未満の値を返すサブセットコマンドを書いてください。

## チャレンジ：データを抽出するための論理ベクトルの作成1

ベクトルの要素を、特定のリスト内のいずれかと一致させる操作は、データ解析で非常に一般的なタスクです。
例えば、`gapminder` データセットには `country` と `continent` の変数がありますが、これらの間の情報は含まれていません。
東南アジアの情報を抽出したいとします。このとき、どのようにして東南アジアのすべての国について `TRUE`、それ以外を `FALSE` とする論理ベクトルを作成しますか？

以下のデータを使用します：

``` r
seAsia <- c("Myanmar","Thailand","Cambodia","Vietnam","Laos")
## エピソード2でダウンロードした gapminder データを読み込む
gapminder <- read.csv("data/gapminder_data.csv", header=TRUE)
## データフレームから `country` 列を抽出（詳細は後述）；
## factor を文字列に変換；
## 重複しない要素のみ取得
countries <- unique(as.character(gapminder$country))
```

## チャレンジ：データを抽出するための論理ベクトルの作成2

以下の3つの方法を試し、それぞれがどのように（正しくない、または正しい方法で）動作するのか説明してください：

1. 間違った方法（`==` のみを使用）
2. 不格好な方法（論理演算子 `==` と `|` を使用）
3. エレガントな方法（`%in%` を使用）

## チャレンジ：データフレームサブセットエラーの修正

以下の一般的なデータフレームサブセットエラーを修正してください：

1. 年 1957 の観測値を抽出する
``` r
gapminder[gapminder$year = 1957,]
```

2. 1列目から4列目以外のすべての列を抽出する
``` r
gapminder[,-1:4]
```

3. 寿命が80年以上の行を抽出する
``` r
gapminder[gapminder$lifeExp > 80]
```

4. 1行目と4列目、5列目（`continent` と `lifeExp`）を抽出する
``` r
gapminder[1, 4, 5]
```

5. 応用：年 2002 年と 2007 年の情報を含む行を抽出する
``` r
gapminder[gapminder$year == 2002 | 2007,]
```

## チャレンジ：データフレームのサブセットへのアクセス

1. なぜ `gapminder[1:20]` はエラーを返すのでしょうか？ `gapminder[1:20, ]` とはどう異なるのでしょうか？

2. 行 1 から 9 と 19 から 23 のみを含む新しい `data.frame` を作成し、それを `gapminder_small` と名付けてください。この操作は 1 ステップまたは 2 ステップで行うことができます。

# ggplot2 を使用した出版品質のグラフィック作成

## チャレンジ

例を修正して、平均寿命が時間とともにどのように変化したかを示す図を作成してください：

``` r
ggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp)) + geom_point()
```

ヒント：`gapminder` データセットには “year” という列があり、これを X 軸に表示する必要があります。

## チャレンジ

ポイントレイヤーとラインレイヤーの両方を入れてみてください。何が起こるでしょうか？

## チャレンジA

前の例のポイントレイヤーで、ポイントの色とサイズを変更してください。

ヒント：`aes` 関数を使用しないでください。

ヒント：ポイントに対する `linewidth` に相当するものは `size` です。

## チャレンジB

チャレンジA の解答を修正し、ポイントの形状を変更し、大陸ごとに異なる色と新しいトレンドラインを追加してください。

ヒント：`color` 引数は `aes` 関数のマッピング内で使用できます。

## チャレンジ

異なる大陸間で利用可能な年における平均寿命を比較するボックスプロットを生成してください。

応用：

- Y軸の名前を「Life Expectancy」に変更する。
- X軸のラベルを削除する。

## チャレンジ：ggplot2 の出力のファイル保存

‘pdf’ コマンドを変更して、PDFの2ページ目を作成し、 同じデータを使って `facet_grid` を使用して大陸ごとに1つのパネルを表示するプロットを追加してください。

## チャレンジ：データフレームのサブセットのファイル保存

`gapminder` データを1990年以降に収集されたデータポイントのみを含むようにサブセット化する データクリーニングスクリプトファイルを作成してください。

このスクリプトを使用して、新しいサブセットを `cleaned-data/` ディレクトリに保存してください。

<!-- FIX ME: Add after receiving feedback

## よくできたこと

## 改善できること

-->

## 集合写真

- 「公開しても大丈夫」という方は、ぜひご協力ください。

- 後ろから撮影した集合写真を公開する場合があります。もし公開を希望されない場合は、お知らせください。

<https://swcarpentry-ja.github.io/2024-05-30-chiba/>
